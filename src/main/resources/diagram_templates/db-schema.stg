// **********************************************************************
//   This file is part of DB Schema Definition Translator.              *
//                                                                      *
//   DB Schema Definition Translator is free software: you can          *
//   redistribute it and/or modify it under the terms of the GNU        *
//   General Public License as published by the Free Software           *
//   Foundation, either version 2 of the License, or any later version. *
//                                                                      *
//   Foobar is distributed in the hope that it will be useful,          *
//   but WITHOUT ANY WARRANTY; without even the implied warranty of     *
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *
//   GNU General Public License for more details.                       *
//                                                                      *
//   You should have received a copy of the GNU General Public License  *
//   along with Foobar.  If not, see <http://www.gnu.org/licenses/>.    *
//                                                                      *
//   Author: Felipe Crespo Gambade                                      *
//                                                                      *
//***********************************************************************

group dbs;

dbs_root_rule(dbs) ::=
<<

digraph tablas {

bgcolor=white;
//splines=ortho;
nodesep=0;
rankdir=TD;
colorscheme=paired12;

    <dbs.tables:table(table=it); separator="\n\n">
    <dbs.tables:arrows(t=it); separator="\n\n">

}

>>


table(table) ::= <<

	subgraph clusterFake1<table.name> {
	color = white;
	subgraph clusterFake2<table.name> {
	color = white;
	subgraph clusterFake3<table.name> {
	color = white;

           subgraph cluster<table.name> {
              style="filled";
              fillcolor=2;
              fontcolor=white;
              fontsize=24,
              label="<table.name>";

              invisible2<table.name> [shape=point style=invis];
              node [shape="record", style="filled", layer="all", fillcolor="/paired12/8", fontcolor="white"];
              <table.name>Types [label="{ <table.columns:columnType(c=it); separator=" | "> }"];
              node [shape="record", style="filled", layer="all", fillcolor="/paired12/11", fontcolor="black"];
              <table.name>Names [label="{ <table.columns:columnName(c=it); separator=" | "> }"];
              invisible1<table.name> [shape=point style=invis];
           }
    }}}
>>

columnName(c) ::=
<< <c.name> >>

columnType(c) ::=
<< <dataType(t=c.dataType, c=c)> >>

// ------------------- Column types -----------------------
dataType(t, c) ::=
<< <if(t.text)><textType(c=c)><endif><if(t.number)><numberType(c=c)><endif><if(t.boolean)><booleanType()><endif><if(t.date)><dateType()><endif>
>>

textType(c) ::=
<< TXT(<c.size>) >>

numberType(c) ::=
<< NUMBER<if(c.precision)>(<c.precision><if(c.scale)>,<c.scale><endif>)<endif> >>


booleanType() ::=
<< BOOL >>

dateType() ::=
<< DATE >>




arrows(t) ::=
<<
  <t.constraints:constraint(con=it, t=t); separator="\n\n">
>>

constraint(con, t) ::=
<<
  <if(con.type.foreignKey)> <foreignKey(con=con, t=t)> <endif>
>>


foreignKey(con, t) ::=
<<
 invisible2<t.name> -> invisible1<con.referenceTable> ;
>>
