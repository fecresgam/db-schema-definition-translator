// **********************************************************************
//   This file is part of DB Schema Definition Translator.              *
//                                                                      *
//   DB Schema Definition Translator is free software: you can          *
//   redistribute it and/or modify it under the terms of the GNU        *
//   General Public License as published by the Free Software           *
//   Foundation, either version 2 of the License, or any later version. *
//                                                                      *
//   Foobar is distributed in the hope that it will be useful,          *
//   but WITHOUT ANY WARRANTY; without even the implied warranty of     *
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *
//   GNU General Public License for more details.                       *
//                                                                      *
//   You should have received a copy of the GNU General Public License  *
//   along with Foobar.  If not, see <http://www.gnu.org/licenses/>.    *
//                                                                      *
//   Author: Felipe Crespo Gambade                                      *
//                                                                      *
//***********************************************************************

group dbs;

dbs_root_rule(dbs) ::=
<<

digraph tablas {

bgcolor=white;
//splines=ortho;
nodesep=0;
rankdir=TD;
colorscheme=paired12;

    <dbs.tables:table(table=it); separator="\n\n">
    <dbs.tables:arrows(t=it); separator="\n\n">

}

>>


table(table) ::= <<

	subgraph clusterFake1<table.name> {
	color = white;
	subgraph clusterFake2<table.name> {
	color = white;
	subgraph clusterFake3<table.name> {
	color = white;



              node [shape="record", style="filled", layer="all", fillcolor="/paired12/2", fontcolor="white"];

              table<table.name> [label="{ <table.name> }"];

    }}}


>>




arrows(t) ::=
<<
  <t.constraints:constraint(con=it, t=t); separator="\n\n">
>>

constraint(con, t) ::=
<<
  <if(con.type.foreignKey)> <foreignKey(con=con, t=t)> <endif>
>>


foreignKey(con, t) ::=
<<
 table<t.name> -> table<con.referenceTable> ;
>>
