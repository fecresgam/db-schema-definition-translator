// **********************************************************************
//   This file is part of DB Schema Definition Translator.              *
//                                                                      *
//   DB Schema Definition Translator is free software: you can          *
//   redistribute it and/or modify it under the terms of the GNU        *
//   General Public License as published by the Free Software           *
//   Foundation, either version 2 of the License, or any later version. *
//                                                                      *
//   Foobar is distributed in the hope that it will be useful,          *
//   but WITHOUT ANY WARRANTY; without even the implied warranty of     *
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      *
//   GNU General Public License for more details.                       *
//                                                                      *
//   You should have received a copy of the GNU General Public License  *
//   along with Foobar.  If not, see <http://www.gnu.org/licenses/>.    *
//                                                                      *
//   Author: Felipe Crespo Gambade                                      *
//                                                                      *
//***********************************************************************


// Falta el "using index" en PK

group dbs;

dbs_root_rule(dbs) ::= <<

-- 90 - Generated SQL Constraints

<dbs.tables:table(t=it, ts=dbs.defaultIndexTablespace); separator="\n\n">
>>


// ------------------------- Tables -----------------------
table(t, ts) ::=
<<
-- <t.name>
<t.constraints:constraint(con=it, t=t, ts=ts); separator="\n\n">
>>


// ------------------------- Columns -----------------------
constraint(con, t, ts) ::=
<< <if(con.type.index)> <index(con=con, t=t, ts=ts)> <endif><if(con.type.primaryKey)> <primaryKey(con=con, t=t)> <endif><if(con.type.foreignKey)> <foreignKey(con=con, t=t)> <endif><if(con.type.uniqueKey)> <uniqueKey(con=con, t=t)> <endif><if(con.type.check)> <check(con=con, t=t)> <endif> >>

index(con, t, ts)
::=
<< create index <con.name> on <t.name> (<column_list_ind(col=con.columns)>) tablespace <ts>; >>

primaryKey(con, t)
::=
<< alter table <t.name> add constraint <con.name> primary key <column_list(col=con.columns)> <if(con.usingIndex)>using index <con.index><endif>; >>

foreignKey(con, t)
::=
<< alter table <t.name> add constraint <con.name>
     foreign key <column_list(col=con.columns)>
     references <con.referenceTable> <column_list(col=con.referenceColumns)>; >>

uniqueKey(con, t)
::=
<< alter table <t.name> add constraint <con.name> unique <column_list(col=con.columns)>; >>

check(con, t)
::=
<< alter table <t.name> add constraint <con.name> check (<con.column> <con.condition>); >>


column_list(col)
::=
<< (<col:column(col=it); separator=", ">) >>

column (col)
::=
<< <col> >>

// -------- Columns for indexes ------------------------
column_list_ind(col)
::=
<< (<col:column_ind(col=it); separator=", ">) >>

column_ind (col)
::=
<< <col> <col.name> <if(col.orderType)> <col.orderType> <endif> >>
